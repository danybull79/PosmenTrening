{
	"info": {
		"_postman_id": "e1fbfeaf-d0d9-4b91-9db1-50f94f2bcc37",
		"name": "SimpleBooks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20623793",
		"_collection_link": "https://hypercloud-team-62763.postman.co/workspace/API-testing-Cocncord-trening~d76d8e5f-68a9-4055-a3e8-ffdb04a25c28/collection/20623793-e1fbfeaf-d0d9-4b91-9db1-50f94f2bcc37?action=share&creator=20623793&source=collection_link"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verifay creation of the accses token\", function() {\r",
							"   pm.expect(response.accessToken).to.not.be.empty\r",
							"})\r",
							"\r",
							"pm.globals.set(\"accesstoken\", response.accessToken);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomUserName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the API is returning the Corrrect Status\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify the API is returningg the Correct Status\", function(){\r",
							"    pm.response.to.be.ok\r",
							"})\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify that status is OK\", function() {\r",
							"    pm.expect(response.status).to.be.string\r",
							"})\r",
							"\r",
							"pm.test(\"Verify that responce body status is 'OK'\", function() {\r",
							"    pm.expect(response.status).to.eql(\"OK\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLadress}}/Status",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"Status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Books List\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verifay that 'The Russian ' is in the responce\", function() {\r",
							"    pm.expect(response[0].name).to.eql(\"The Russian\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape fiction is in the respomse\", function() {\r",
							"    pm.expect(response[0].type).to.eql(\"fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available true is in the responce\", function() {\r",
							"    pm.expect(response[0].available).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that ID is 1\", function() {\r",
							"    pm.expect(response[0].id).to.eql(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLadress}}/books",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Books by Count Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Books List\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Varifay thet ID is 1\", function() {\r",
							"    pm.expect(response[0].id).to.eql(1)\r",
							"})\r",
							"\r",
							"pm.test(\"Verifay that 'The Russian' is in the responce\", function() {\r",
							"    pm.expect(response[0].name).to.eql(\"The Russian\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape fiction is in the respomse\", function() {\r",
							"    pm.expect(response[0].type).to.eql(\"fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available true is in the responce\", function() {\r",
							"    pm.expect(response[0].available).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Varifay thet ID is 2\", function() {\r",
							"    pm.expect(response[1].id).to.eql(2)\r",
							"})\r",
							"\r",
							"pm.test(\"Verifay that 'Just as I Am' is in the responce\", function() {\r",
							"    pm.expect(response[1].name).to.eql(\"Just as I Am\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape non-fiction is in the respomse\", function() {\r",
							"    pm.expect(response[1].type).to.eql(\"non-fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available true is in the responce\", function() {\r",
							"    pm.expect(response[1].available).to.be.false\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/books?limit=2",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Books by Type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Books List\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Varifay thet ID is 2\", function() {\r",
							"    pm.expect(response[0].id).to.eql(2)\r",
							"})\r",
							"\r",
							"pm.test(\"Verifay that 'Just as I Am' is in the responce\", function() {\r",
							"    pm.expect(response[0].name).to.eql(\"Just as I Am\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape non-fiction is in the respomse\", function() {\r",
							"    pm.expect(response[0].type).to.eql(\"non-fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available true is in the responce\", function() {\r",
							"    pm.expect(response[0].available).to.be.false\r",
							"})\r",
							"\r",
							"pm.test(\"Varifay thet ID is 5\", function() {\r",
							"    pm.expect(response[1].id).to.eql(5)\r",
							"})\r",
							"\r",
							"pm.test(\"Verifay that 'c' is in the responce\", function() {\r",
							"    pm.expect(response[1].name).to.eql(\"Untamed\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape non-fiction is in the respomse\", function() {\r",
							"    pm.expect(response[1].type).to.eql(\"non-fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available true is in the responce\", function() {\r",
							"    pm.expect(response[1].available).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/books?type=non-fiction",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get a Book by ID\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Varifay thet ID is 2\", function() {\r",
							"    pm.expect(response.id).to.eql(1)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify that 'The Russian' is in the responce\", function() {\r",
							"    pm.expect(response.name).to.eql(\"The Russian\")\r",
							"})\r",
							"\r",
							"pm.test(\"Verify that the order is created\", function() {\r",
							"    pm.expect(response.author).to.eql(\"James Patterson and James O. Born\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that tape fiction is in the respomse\", function() {\r",
							"    pm.expect(response.type).to.eql(\"fiction\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that isbn is in the respomse\", function() {\r",
							"    pm.expect(response.isbn).to.eql(\"1780899475\")\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that price is in the respomse\", function() {\r",
							"    pm.expect(response.price).to.eql(12.98)\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that current-stock is in the respomse\", function() {\r",
							"    pm.expect(response[\"current-stock\"]).to.eql(12)\r",
							"})\r",
							"\r",
							"pm.test(\"Veryfay that available is in the respomse\", function() {\r",
							"    pm.expect(response.available).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLadress}}/books/1",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLadress}}/orders",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Success Status\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify that the submiting new order is succssfuly\", function(){\r",
							"    pm.expect(response.created).to.be.true;\r",
							"    pm.expect(response.orderId).to.not.be.empty;\r",
							"    pm.expect(response.orderId).to.not.be.string;\r",
							"});\r",
							"\r",
							"pm.globals.set(\"orderId\", response.orderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/orders",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit Order without body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order Submitted\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    \r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify that the error masige is corrected\", function() {\r",
							"    pm.expect(response.error).to.eql(\"Invalid or missing bookId.\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/orders",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit Order without Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Missing Authorization Token\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"    pm.response.to.be.unauthorized;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 4,\r\n  \"customerName\": \"No Auth\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/orders",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The Order is Succesfully Updated\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Jane Doe\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLadress}}/orders/{{orderId}}",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order deleted\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Cache-Control",
						"value": "no-cache",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URLadress}}/orders/:id",
					"host": [
						"{{URLadress}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"URLadress\",\"https://simple-books-api.glitch.me\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}